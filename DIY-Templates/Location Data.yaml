# Data Structure:
#   Attributes (name, visited, references) are lower case  and dictionary keys (NARRATIVES, MOVES) are uppercase.
#   The LOCATIONS dictionary contains keys of each location's reference number (0, 7, 5a, 10b)
#   Those keys contain all the data about a location. Each location must have:
#       Name -- not sure this will be used in the game anyways...but I just put it there.
#       References: which the player can call a location by.
#       Visited: times the player visited that location
#       NARRATIVES: Dictionary of narratives, in which there is a long and (not always) short one. If no short, default to long narrative.
#         If a location has one long(/short) narrative set regardless of the state of anything else in the game, then the narratives are simply declared with the 'long' and 'short' keys.
#         If there are exceptions, however, then underneath the 'long' and 'short' keys will be 'general' and 'exception' keys. The 'general' key will 
#         contain the general long/short narrative, hence the word general. Any exceptions will go underneath the 'exception' key. Exceptions are based on an item's attribute. Items can be
#         locations, objects, actors, or the player. The name of the item will be the key for its set of conditions and narratives. So a location's key would be '6a' for example, and the key for
#         an object can be 'lantern'. The value under an item key is a list of lists. Each sublist is another condition/narrative set. A sublist contains a 'if' key, which holds a list of the
#         attribute name as the first value, and the attribute value that is needed in order for the narrative based on this condition to fire. The sublist also contains a 'narrative' key, which just
#         holds the narrative to play if the item's attribute value matches the value declared in the 'if' key.
#       MOVES: This dictionary contains N,E,S,W keys whose values are the location numbers that these directions take the player to. Instead of a location number, there are two other options:
#         1. A warning. It is a dictionary which contains 2 keys: 'warning' and 'yes'. The 'warning' key contains the warning message/question, and the 'yes' key which contains the location to go to if the user
#            answers positively ('yes', 'y', 'ok') to the warning question. The program will keep the user in a loop asking the warning question until the user provides either a yes-type answer or a no-type answer.
#         2. A word -- but not just any word -- this word refers to a dictionary defined with this word as the key name. This dictionary cotains a list of items, and is to be used when the game creator wants to
#            be able to print a random item from this list when the player tries to go to this location. The most prevalent example of this is a game boundaries message -- it would be boring to have just one
#            message when the user hits a boundaries, so the creator can define multiple messages and the program will pick one randomly from the list within the dictionary.
#            These items can be any data type (boolean, string, etc.) -- but in the game's case, the list will most likely contain strings -- messages for the player.
#         The MOVES dictionary can also contain a move_commands key, which holds a list of dictionaries, in a similar format as commands are declared in within the COMMANDS.yaml file: There is a 'words' key which contains a
#         list of the words which activate the other key, the 'direction' key. This contains either N,E,S,W, or any of the other options laid out above. The reason there is a special move_commands dictionary
#         is to allow for a case in which the user says "go out" -- and "out" is one of the move_commands. Since "out" was declared as move command, that means that the parser will realize that any verb associated with moving
#         that precedes the word "out", or any move_command, will not be looked at as a verb without a direction -- without this, if the parser saw "go out", it would see that the verb "go" is missing a direction, but since
#         "out" is a move_command, it will realize that the word "go" maps to the move command. Move commands can also be used alone.
#     Not required for a location:
#       OBJECTS: A list of the names of the objects that the location contains. Simple. *** wipes/dusts hands clean ***

instructions: Provide instructions to player.
intro: This is the intro to the game, the first thing the player sees.


LOCATIONS:

####### LEVEL 1 #######

  # simple location, no complications
  '0':
    name:
    references: []
    NARRATIVES:
      long: |  # | is to preserve the newlines
        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor
        incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud
        exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute
        irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
        pariatur. 
      short: Donec quis dui at dolor tempor interdum.
    OBJECTS: []
    ACTORS: []
    MOVES:
      N:
      E:
      S:
      W:
    
  # more complex, with general/exception narratives
  '1':
    name:
    references: []
    visited: 0
    can_enter: True
    NARRATIVES:
      long: |  # | is to preserve the newlines
        general: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor
          incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud
          exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute
          irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
          pariatur. 
        exceptions:
        - {if: [[item, attribute, value]],  # e.g. player, health, 50 or lantern, lit, False
        narrative: |  # | is to preserve the newlines
          Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque
          laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi
          architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas
          sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione
          voluptatem sequi nesciunt.
          }

      short:
        general: Donec quis dui at dolor tempor interdum.
        exceptions:
        - {if: [[item, attribute, value]],  # e.g. player, health, 50 or lantern, lit, False
        narrative: 'Integer vitae libero ac risus egestas placerat.'
          }

    OBJECTS: []
    ACTORS: []
    MOVES:
      N:
      E:
      S:
      W:
      
  '2':
    name: cliffEdge0
    visited: 0
    can_enter: always
    NARRATIVES:
      long: |  # | is to preserve the newlines
        general:
          narrative: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor
            incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud
            exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute
            irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
            pariatur.
          actions: [[player, goto, '0']]  # takes the player to location '0'

        exceptions:
        - {if: [[item, attribute, value]],  # e.g. player, health, 50 or lantern, lit, False
        narrative: |  # | is to preserve the newlines
          Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque
          laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi
          architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas
          sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione
          voluptatem sequi nesciunt.
        actions: [[item, attribute, change_state, True]]  # changes item's attribute to True
          }

      short: Donec quis dui at dolor tempor interdum.

    MOVES:
      N: boundaries  # the name of the boundaries dictionary in Random Dicts.YAML -- program will choose an element from boundaries list randomly
      E: {warning: "Are you sure that you want to go here?",
            yes: '5', no: Good idea.}  # 'yes' takes player to location '5' and no tells them 'Good idea.'
      S: '3'
      W: '1'

    COMMANDS:
    - [do]  # add synonyms

    REACTIONS:
      do:
        reaction: You did something.
        actions: [[player, change_state, attribute, value]]

  4a:
    name: bridge
    references: [bridge, overpass, walkway]
    can_enter: always
    visited: 0
    NARRATIVES:
      long:
        general: A wooden plank-bridge stretches out before you, providing a pathway across
          the chasm. One problem, though - Yes, a troll — a short ginger-haired and brown-skinned
          creature — stands guard in front, holding a rusty metal staff.
        exceptions:
        - {if: [[troll, guarding, False]],
          narrative: A wooden plank-bridge stretches out before you, providing a pathway across 
              the chasm. It is unguarded, just waiting for a passerby to cross it.}
      short:
        general: The bridge is in front of you, guarded by an ugly troll in front holding
          a metal staff.
        exceptions:
        - {if: [[troll, guarding, False]],
          narrative: The bridge stretches out in front of you, unguarded.}

    MOVES:
      N: {warning: "Are you sure that you want to go off the edge of the cliff, down to the CRAGGY ROCKS AND RIVER 2000 FEET BELOW??",
            yes: '9', no: Good choice. Suicide = bad. }
      E: 4b
      S: {warning: "You sure you want to jump over the bridge? You will most definitely crack your head on a rock below.",
            yes: 10d, no: Good choice. Suicide = bad. }
      W: '4'

    ACTORS: [troll]
    COMMANDS:
    - [jump, suicide, jump over bridge, kill myself]

    REACTIONS:
      jump:
        reaction: Ookayyy, killing yourself on 1, 2, -----------
        actions: [[goto, S]]


  4b:
    name: acrossBridge
    visited: 0
    can_enter: [[troll, guarding, False]]
    NARRATIVES:
      long:
        general: You are on the other side of the bridge, yay. To be continued.
        exceptions:
          - {if: [[4b, visited, 0]],
            narrative: Walking steadily across the wooden planks, you notice a figure at the other
              side -- a classically bearded, tall man, robed in silver-grey folds standing
              proud, watching you cross; almost like he is guarding the other side of the
              bridge, as if in consortium with the troll. Reaching the other side, the man
              brings his large hands together, and you hear a large rumble beneath the ground.
              All goes dark.,
            actions: [[player, goto, '0'], [player, change_state, can_walk, True]]}


    MOVES:
      N: boundaries
      E: boundaries
      S: boundaries
      W: 4a

  '5':
    name:
    visited: 0
    NARRATIVES:
      long: Long narrative.
    MOVES:
      N:
      E:
      S:
      W:
